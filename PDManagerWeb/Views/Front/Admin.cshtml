@{
    ViewData["Title"] = "Администрирование";
}
<div class="text-center">
    <h1 class="display-4">Администрирование</h1>
    <div>
        <h1 class="display-6">Запросы доступа</h1>
        <table class="center">
            <thead>
                <tr>
                    <th>Запрос</th>
                    <th>Опции</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <select id="prAccs"></select>
                    </td>
                    <td>
                        <p><input type="button" id="gAccB" value="Разрешить" /></p>
                        <p><input type="button" id="dAccB" value="Запретить" /></p>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div>
        <h1 class="display-6">Продукты</h1>
        <table class="center">
            <thead>
                <tr>
                    <th>Продукт</th>
                    <th>Дата создания</th>
                    <th>Опции</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <input type="text" id="prN">
                    </td>
                    <td></td>
                    <td>
                        <input type="button" id="cPrB" value="Создать" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <select id="prs"></select>
                    </td>
                    <td>
                        <label id="prCrDt"></label>
                    </td>
                    <td>
                        <input type="button" id="dPrB" value="Удалить" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div>
        <h1 class="display-6">Типы документации</h1>
        <table class="center">
            <thead>
                <tr>
                    <th>Тип документации</th>
                    <th>Опции</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <input type="text" id="dtN">
                    </td>
                    <td>
                        <input type="button" id="cDtB" value="Создать" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <select id="dts"></select>
                    </td>
                    <td>
                        <input type="button" id="dDtB" value="Удалить" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div>
        <h1 class="display-6">Форматы файлов</h1>
        <table class="center">
            <thead>
                <tr>
                    <th>Формат файла</th>
                    <th>Опции</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <input type="text" id="ffN">
                    </td>
                    <td>
                        <input type="button" id="cFfB" value="Создать" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <select id="ffs"></select>
                    </td>
                    <td>
                        <input type="button" id="dFfB" value="Удалить" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div>
        <h1 class="display-6">Сочетания тип-формат</h1>
        <table class="center">
            <thead>
                <tr>
                    <th>Тип документации</th>
                    <th>Формат файла</th>
                    <th>Опции</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <select id="dfDts"></select>
                    </td>
                    <td>
                        <select id="dfFfs"></select>
                    </td>
                    <td>
                        <p><input type="button" id="cDfB" value="Добавить" /></p>
                        <p><input type="button" id="dDfB" value="Удалить" /></p>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
@section scripts
{
    <script>
        var prAccs = document.getElementById("prAccs"),
            gAccB = document.getElementById("gAccB"),
            dAccB = document.getElementById("dAccB"),
            prN = document.getElementById("prN"),
            cPrB = document.getElementById("cPrB"),
            prs = document.getElementById("prs"),
            prCrDt = document.getElementById("prCrDt"),
            dPrB = document.getElementById("dPrB"),
            dtN = document.getElementById("dtN"),
            cDtB = document.getElementById("cDtB"),
            dts = document.getElementById("dts"),
            dDtB = document.getElementById("dDtB"),
            ffN = document.getElementById("ffN"),
            cFfB = document.getElementById("cFfB"),
            ffs = document.getElementById("ffs"),
            dFfB = document.getElementById("dFfB"),
            dfDts = document.getElementById("dfDts"),
            dfFfs = document.getElementById("dfFfs"),
            cDfB = document.getElementById("cDfB"),
            dDfB = document.getElementById("dDfB");

        function Startup2() {
            LoadPrs();
            LoadDts();
            LoadFfs();
            LoadPrAccs();
            prs.addEventListener('change', () => {
                if (prs.value === "") {
                    prCrDt.innerHTML = "-";
                    dPrB.disabled = true;
                }
                else {
                    prCrDt.innerHTML = prs.options[prs.selectedIndex].dataset.st;
                    dPrB.disabled = false;
                }
            });
            cPrB.addEventListener('click', CreatePr);
            dPrB.addEventListener('click', DeletePr);
            dts.addEventListener('change', () => { dDtB.disabled = dts.value === ""; });
            cDtB.addEventListener('click', CreateDt);
            dDtB.addEventListener('click', DeleteDt);
            ffs.addEventListener('change', () => { dFfB.disabled = ffs.value === ""; });
            cFfB.addEventListener('click', CreateFf);
            dFfB.addEventListener('click', DeleteFf);
            prAccs.addEventListener('change', () => {
                gAccB.disabled = prAccs.value === "";
                dAccB.disabled = gAccB.disabled;
            });
            gAccB.addEventListener('click', () => SetPrAcc(true));
            dAccB.addEventListener('click', () => SetPrAcc(false));
            dfDts.addEventListener('change', LoadDfState);
            dfFfs.addEventListener('change', LoadDfState);
            cDfB.addEventListener('click', () => SetDfState(true));
            dDfB.addEventListener('click', () => SetDfState(false));
        }

        async function LoadPrs() {
            prCrDt.innerHTML = "-";
            dPrB.disabled = true;

            const request = new Request("/AdminPage?handler=Products");

            const options = {
                method: "GET"
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            prs.innerHTML = "<option value='' disabled selected hidden>-Выберите продукт-</option>";

            json.forEach(function (pr) {
                const option = document.createElement('option');
                option.value = pr.id;
                option.dataset.st = pr.startDate;
                option.innerHTML = pr.name;
                prs.appendChild(option);
            });
        }

        async function CreatePr() {
            if (prN.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=Product");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            var data = new FormData();
            data.append('productName', prN.value);

            const options = {
                method: "POST",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            prN.value = "";

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadPrs();
            }
            else {
                const option = document.createElement('option');
                option.value = json.id;
                option.dataset.st = json.startDate;
                option.innerHTML = json.name;
                prs.appendChild(option);
            }
        }

        async function DeletePr() {
            if (prs.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=Product");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            const curInd = prs.selectedIndex;

            var data = new FormData();
            data.append('productId', prs.value);

            const options = {
                method: "DELETE",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadPrs();
            }
            else {
                prs.remove(curInd);
                prs.selectedIndex = 0;
                prs.dispatchEvent(new Event('change'));
            }
        }

        async function LoadDts() {
            dDtB.disabled = true;
            cDfB.disabled = true;
            dDfB.disabled = true;

            const request = new Request("/AdminPage?handler=DocTypes");

            const options = {
                method: "GET"
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            dts.innerHTML = "<option value='' disabled selected hidden>-Выберите вид документации-</option>";
            dfDts.innerHTML = dts.innerHTML;

            json.forEach(function (dt) {
                const option = document.createElement('option');
                option.value = dt.id;
                option.innerHTML = dt.name;
                dts.appendChild(option);
                dfDts.appendChild(option.cloneNode(true));
            });
        }

        async function CreateDt() {
            if (dtN.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=DocType");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            var data = new FormData();
            data.append('docTypeName', dtN.value);

            const options = {
                method: "POST",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            dtN.value = "";

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadDts();
            }
            else {
                const option = document.createElement('option');
                option.value = json.id;
                option.innerHTML = json.name;
                dts.appendChild(option);
                dfDts.appendChild(option.cloneNode(true));
            }
        }

        async function DeleteDt() {
            if (dts.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=DocType");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            const curInd = dts.selectedIndex;

            var data = new FormData();
            data.append('docTypeId', dts.value);

            const options = {
                method: "DELETE",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadDts();
            }
            else {
                dts.remove(curInd);
                dts.selectedIndex = 0;
                dts.dispatchEvent(new Event('change'));
                dfDts.remove(curInd);
                dfDts.selectedIndex = 0;
                dfDts.dispatchEvent(new Event('change'));
            }
        }

        async function LoadFfs() {
            dFfB.disabled = true;
            cDfB.disabled = true;
            dDfB.disabled = true;

            const request = new Request("/AdminPage?handler=FileFormats");

            const options = {
                method: "GET"
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            ffs.innerHTML = "<option value='' disabled selected hidden>-Выберите формат файла-</option>";
            dfFfs.innerHTML = ffs.innerHTML;

            json.forEach(function (ff) {
                const option = document.createElement('option');
                option.value = ff.id;
                option.innerHTML = ff.extension;
                ffs.appendChild(option);
                dfFfs.appendChild(option.cloneNode(true));
            });
        }

        async function CreateFf() {
            if (ffN.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=FileFormat");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            var data = new FormData();
            data.append('fileFormatName', ffN.value);

            const options = {
                method: "POST",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            ffN.value = "";

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadFfs();
            }
            else {
                const option = document.createElement('option');
                option.value = json.id;
                option.innerHTML = json.extension;
                ffs.appendChild(option);
                dfFfs.appendChild(option.cloneNode(true));
            }
        }

        async function DeleteFf() {
            if (ffs.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=FileFormat");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            const curInd = ffs.selectedIndex;

            var data = new FormData();
            data.append('fileFormatId', ffs.value);

            const options = {
                method: "DELETE",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadFfs();
            }
            else {
                ffs.remove(curInd);
                ffs.selectedIndex = 0;
                ffs.dispatchEvent(new Event('change'));
                dfFfs.remove(curInd);
                dfFfs.selectedIndex = 0;
                dfFfs.dispatchEvent(new Event('change'));
            }
        }

        async function LoadPrAccs() {
            gAccB.disabled = true;
            dAccB.disabled = true;

            const request = new Request("/AdminPage?handler=ProductAccesses");

            const options = {
                method: "GET"
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            prAccs.innerHTML = "<option value='' disabled selected hidden>-Выберите запрос-</option>";

            json.forEach(function (prAcc) {
                const option = document.createElement('option');
                option.value = prAcc.userId;
                option.dataset.pr = prAcc.productId;
                option.innerHTML = prAcc.userName + " к " + prAcc.productName;
                prAccs.appendChild(option);
            });
        }

        async function SetPrAcc(answer) {
            if (prAccs.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=ProductAccess");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            const curInd = prAccs.selectedIndex;

            var data = new FormData();
            data.append('userId', prAccs.value);
            data.append('productId', prAccs.options[curInd].dataset.pr);
            data.append('answer', answer);

            const options = {
                method: "PUT",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            if (json.result === 0) {
                LoadPrAccs();
            }
            else {
                prAccs.remove(curInd);
                prAccs.selectedIndex = 0;
                prAccs.dispatchEvent(new Event('change'));
            }
        }

        async function LoadDfState() {
            cDfB.disabled = true;
            dDfB.disabled = true;

            if (dfDts.value === "" || dfFfs.value === "") {
                return;
            }

            const request = new Request(`/AdminPage?handler=DfState&docTypeId=${dfDts.value}&fileFormatId=${dfFfs.value}`);

            const options = {
                method: "GET"
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            switch (json.result) {
                case -2:
                    {
                        LoadDts();
                        break;
                    }
                case -1:
                    {
                        LoadFfs();
                        break;
                    }
                case 0:
                    {
                        cDfB.disabled = false;
                        break;
                    }
                default:
                    {
                        dDfB.disabled = false;
                        break;
                    }
            }
        }

        async function SetDfState(state) {
            if (dfDts.value === "" || dfFfs.value === "") {
                return;
            }

            const request = new Request("/AdminPage?handler=DfState");

            const token = document.getElementsByName
                ("__RequestVerificationToken")[0];

            var data = new FormData();
            data.append('docTypeId', dfDts.value);
            data.append('fileFormatId', dfFfs.value);
            data.append('state', state);

            const options = {
                method: "PUT",
                headers: {
                    'PD_XSRF_TOKEN': token.value
                },
                body: data
            };

            const response = await fetch(request, options);

            if (!response.ok) {
                return;
            }

            const json = await response.json();

            LoadDfState();
        }

        document.addEventListener('DOMContentLoaded', Startup2);
    </script>
}